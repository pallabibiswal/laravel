=========================
Indenting and Line Length
=========================
-Use an indent of 4 spaces, with no tabs.
-It is recommended to keep lines at approximately 75-85 characters long for better code readability.

=========================
Control Structures
=========================
-Control statements should have one space between the control keyword and opening parenthesis, to distinguish them from function calls.
For if statement:
<?php
if ((condition1) || (condition2)) {
    action1;
} elseif ((condition3) && (condition4)) {
    action2;
} else {
    defaultaction;
}
?>
For switch statements:

<?php
switch (condition) {
case 1:
    action1;
    break;

case 2:
    action2;
    break;

default:
    defaultaction;
    break;
}
?>
-Long if statements may be split onto several lines when the character/line limit would be exceeded. 
<?php

if (($condition1
    || $condition2)
    && $condition3
    && $condition4
) {
    //code here
}
?>
-The same rule as for if clauses also applies for the ternary operator: It may be split onto several lines, keeping the question mark and the colon at the front.

<?php

$a = $condition1 && $condition2
    ? $foo : $bar;

$b = $condition3 && $condition4
    ? $foo_man_this_is_too_long_what_should_i_do
    : $bar;
?>
==============
Function Calls
===============
-Functions should be called with no spaces between the function name, the opening parenthesis, and the first parameter; spaces between commas and each parameter, and no space between the last parameter, the closing parenthesis, and the semicolon. Here's an example:

<?php
$var = foo($bar, $baz, $quux);
?>
-In the case of a block of related assignments, more space may be inserted to promote readability:

<?php
$short         = foo($bar);
$long_variable = foo($baz);
?>
-split parameters in function calls onto several lines.

<?php

$this->someObject->subObject->callThisFunctionWithALongName(
    $parameterOne, $parameterTwo,
    $aVeryLongParameterThree
);
?>
-The equal signs may be aligned in block-related assignments:

<?php

$short  = foo($bar);
$longer = foo($baz);
?>
=====================
Function Definitions
=====================
-Function declarations must follow the example written below:

<?php
function fooFunction($arg1, $arg2 = '')
{
    if (condition) {
        statement;
    }
    return $val;
}
?>
-Split function definitions onto several lines.
<?php

function someFunctionWithAVeryLongName($firstParameter = 'something', $secondParameter = 'booooo',
    $third = null, $fourthParameter = false, $fifthParameter = 123.12,
    $sixthParam = true
) {
    //....
?>
==================
Class Definitions
==================
Class declarations have their opening brace on a new line:

<?php
class Foo_Bar
{

    //... code goes here

}
?>
======
Array
======
-When splitting array definitions onto several lines, the last value may also have a trailing comma. 
<?php

$some_array = array(
    'foo'  => 'bar',
    'spam' => 'ham',
);
?>
=========
Comments
=========
-C style comments (/* */) and standard C++ comments (//) are both fine.
===============
Including Code
===============
-include_once and require_once are statements, not functions. Parentheses should not surround the subject filename.
================
PHP Code Tags
================
-Always use <?php ?> to delimit PHP code, not the <? ?> shorthand.
=======================
Header Comment Blocks
=======================
-All source code should contaian header comment like:
<?php
/**
* File Doc Comment
*
* PHP version 5
*
* @category PHP
* @package  PHP_CodeSniffer
* @author   Mindfire Solutions <author@example.com>
* @license  http://www.gnu.org/copyleft/gpl.html GNU General Public License
* @link     http://www.mindfiresolutions.com
*/
?>
